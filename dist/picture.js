import PiCamera from "pi-camera";
import fs from "fs";
import sharp from "sharp";
import path from "path";
import { fileURLToPath } from "url";
const __dirname = path.dirname(fileURLToPath(import.meta.url));
export default async function picture(agent) {
    let output = `${__dirname}/photo.jpg`;
    const camera = new PiCamera({
        mode: "photo",
        output,
        width: 1920,
        height: 1080,
        nopreview: true,
    });
    try {
        await camera.snap();
    }
    catch (error) {
        // We're not on an rpi.
        console.log(error);
        output = "recap-image.jpg";
    }
    await sharp(output)
        .toFormat("jpeg", { mozjpeg: true })
        .toFile((output = `${__dirname}/compressed-photo.jpg`));
    let imageSize = (await fs.promises.stat(output)).size / 1024;
    let quality = 80;
    console.log(`${output} image is ${imageSize} kb.`);
    let compressedOutput = output;
    while (imageSize > 975 && quality > 0) {
        quality -= 5;
        await sharp(output)
            .toFormat("jpeg", { mozjpeg: true, quality })
            .toFile((compressedOutput = `${__dirname}/q${quality}-compressed-photo.jpg`));
        imageSize = (await fs.promises.stat(compressedOutput)).size / 1024;
        console.log(`${compressedOutput} image is ${imageSize} kb and quality is ${quality}.`);
    }
    const image = fs.readFileSync(compressedOutput);
    return agent.uploadBlob(image, { encoding: "image/jpeg" });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGljdHVyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9waWN0dXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sUUFBUSxNQUFNLFdBQVcsQ0FBQztBQUNqQyxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDcEIsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBRXBDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUUvRCxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssVUFBVSxPQUFPLENBQUMsS0FBZ0I7SUFDcEQsSUFBSSxNQUFNLEdBQUcsR0FBRyxTQUFTLFlBQVksQ0FBQztJQUV0QyxNQUFNLE1BQU0sR0FBRyxJQUFJLFFBQVEsQ0FBQztRQUMxQixJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU07UUFDTixLQUFLLEVBQUUsSUFBSTtRQUNYLE1BQU0sRUFBRSxJQUFJO1FBQ1osU0FBUyxFQUFFLElBQUk7S0FDaEIsQ0FBQyxDQUFDO0lBQ0gsSUFBSSxDQUFDO1FBQ0gsTUFBTSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZix1QkFBdUI7UUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQixNQUFNLEdBQUcsaUJBQWlCLENBQUM7SUFDN0IsQ0FBQztJQUVELE1BQU0sS0FBSyxDQUFDLE1BQU0sQ0FBQztTQUNoQixRQUFRLENBQUMsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO1NBQ25DLE1BQU0sQ0FBQyxDQUFDLE1BQU0sR0FBRyxHQUFHLFNBQVMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO0lBRTFELElBQUksU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDN0QsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLGFBQWEsU0FBUyxNQUFNLENBQUMsQ0FBQztJQUNuRCxJQUFJLGdCQUFnQixHQUFHLE1BQU0sQ0FBQztJQUU5QixPQUFPLFNBQVMsR0FBRyxHQUFHLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLENBQUM7UUFDYixNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUM7YUFDaEIsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7YUFDNUMsTUFBTSxDQUNMLENBQUMsZ0JBQWdCLEdBQUcsR0FBRyxTQUFTLEtBQUssT0FBTyx1QkFBdUIsQ0FBQyxDQUNyRSxDQUFDO1FBQ0osU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNuRSxPQUFPLENBQUMsR0FBRyxDQUNULEdBQUcsZ0JBQWdCLGFBQWEsU0FBUyxzQkFBc0IsT0FBTyxHQUFHLENBQzFFLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2hELE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztBQUM3RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnNreUFnZW50IH0gZnJvbSBcIkBhdHByb3RvL2FwaVwiO1xuaW1wb3J0IFBpQ2FtZXJhIGZyb20gXCJwaS1jYW1lcmFcIjtcbmltcG9ydCBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCBzaGFycCBmcm9tIFwic2hhcnBcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSBcInVybFwiO1xuXG5jb25zdCBfX2Rpcm5hbWUgPSBwYXRoLmRpcm5hbWUoZmlsZVVSTFRvUGF0aChpbXBvcnQubWV0YS51cmwpKTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gcGljdHVyZShhZ2VudDogQnNreUFnZW50KSB7XG4gIGxldCBvdXRwdXQgPSBgJHtfX2Rpcm5hbWV9L3Bob3RvLmpwZ2A7XG5cbiAgY29uc3QgY2FtZXJhID0gbmV3IFBpQ2FtZXJhKHtcbiAgICBtb2RlOiBcInBob3RvXCIsXG4gICAgb3V0cHV0LFxuICAgIHdpZHRoOiAxOTIwLFxuICAgIGhlaWdodDogMTA4MCxcbiAgICBub3ByZXZpZXc6IHRydWUsXG4gIH0pO1xuICB0cnkge1xuICAgIGF3YWl0IGNhbWVyYS5zbmFwKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gV2UncmUgbm90IG9uIGFuIHJwaS5cbiAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgb3V0cHV0ID0gXCJyZWNhcC1pbWFnZS5qcGdcIjtcbiAgfVxuXG4gIGF3YWl0IHNoYXJwKG91dHB1dClcbiAgICAudG9Gb3JtYXQoXCJqcGVnXCIsIHsgbW96anBlZzogdHJ1ZSB9KVxuICAgIC50b0ZpbGUoKG91dHB1dCA9IGAke19fZGlybmFtZX0vY29tcHJlc3NlZC1waG90by5qcGdgKSk7XG5cbiAgbGV0IGltYWdlU2l6ZSA9IChhd2FpdCBmcy5wcm9taXNlcy5zdGF0KG91dHB1dCkpLnNpemUgLyAxMDI0O1xuICBsZXQgcXVhbGl0eSA9IDgwO1xuICBjb25zb2xlLmxvZyhgJHtvdXRwdXR9IGltYWdlIGlzICR7aW1hZ2VTaXplfSBrYi5gKTtcbiAgbGV0IGNvbXByZXNzZWRPdXRwdXQgPSBvdXRwdXQ7XG5cbiAgd2hpbGUgKGltYWdlU2l6ZSA+IDk3NSAmJiBxdWFsaXR5ID4gMCkge1xuICAgIHF1YWxpdHkgLT0gNTtcbiAgICBhd2FpdCBzaGFycChvdXRwdXQpXG4gICAgICAudG9Gb3JtYXQoXCJqcGVnXCIsIHsgbW96anBlZzogdHJ1ZSwgcXVhbGl0eSB9KVxuICAgICAgLnRvRmlsZShcbiAgICAgICAgKGNvbXByZXNzZWRPdXRwdXQgPSBgJHtfX2Rpcm5hbWV9L3Eke3F1YWxpdHl9LWNvbXByZXNzZWQtcGhvdG8uanBnYCksXG4gICAgICApO1xuICAgIGltYWdlU2l6ZSA9IChhd2FpdCBmcy5wcm9taXNlcy5zdGF0KGNvbXByZXNzZWRPdXRwdXQpKS5zaXplIC8gMTAyNDtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIGAke2NvbXByZXNzZWRPdXRwdXR9IGltYWdlIGlzICR7aW1hZ2VTaXplfSBrYiBhbmQgcXVhbGl0eSBpcyAke3F1YWxpdHl9LmAsXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGltYWdlID0gZnMucmVhZEZpbGVTeW5jKGNvbXByZXNzZWRPdXRwdXQpO1xuICByZXR1cm4gYWdlbnQudXBsb2FkQmxvYihpbWFnZSwgeyBlbmNvZGluZzogXCJpbWFnZS9qcGVnXCIgfSk7XG59XG4iXX0=
import getWeather from "./get-weather.js";
import weatherDescription from "./description.js";
export default async function textReport(station = "KNYC") {
    const weather = (await getWeather(station));
    if (!weather) {
        return "No weather data available.";
    }
    const weatherCodeArray = weather.properties.icon.split("/");
    const weatherCode = weatherCodeArray[weatherCodeArray.length - 1].split("?")[0];
    const description = weatherDescription(weatherCode);
    if (/night/.test(weather.properties.icon)) {
        description.emoji = "ðŸŒƒ";
    }
    let relativeHumidity = "";
    if (weather.properties.relativeHumidity.value) {
        relativeHumidity = `\nRelative Humidity: ${weather.properties.relativeHumidity.value}%`;
    }
    let windChill = "";
    if (weather.properties.windChill.value) {
        windChill = `\nWind Chill: ${weather.properties.windChill.value}Â°`;
    }
    let heatIndex = "";
    if (weather.properties.heatIndex.value) {
        heatIndex = `\nHeat Index: ${weather.properties.heatIndex.value}Â°`;
    }
    return (`Current conditions (via NOAA):
${description.emoji} ${description.description}
Temperature: ${weather.properties.temperature.value}Â°
Visibility: ${weather.properties.visibility.value / 1000}km` +
        relativeHumidity +
        windChill +
        heatIndex);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC1yZXBvcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvd2VhdGhlci90ZXh0LXJlcG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFVBQVUsTUFBTSxrQkFBa0IsQ0FBQztBQUMxQyxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixDQUFDO0FBd0JsRCxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssVUFBVSxVQUFVLENBQ3RDLFVBQWtCLE1BQU07SUFFeEIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxNQUFNLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBa0IsQ0FBQztJQUM3RCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDYixPQUFPLDRCQUE0QixDQUFDO0lBQ3RDLENBQUM7SUFFRCxNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1RCxNQUFNLFdBQVcsR0FDZixnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTlELE1BQU0sV0FBVyxHQUFHLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRXBELElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDMUMsV0FBVyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0lBQzFCLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QyxnQkFBZ0IsR0FBRyx3QkFBd0IsT0FBTyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEdBQUcsQ0FBQztJQUMxRixDQUFDO0lBRUQsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ25CLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdkMsU0FBUyxHQUFHLGlCQUFpQixPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQztJQUNyRSxDQUFDO0lBQ0QsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ25CLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdkMsU0FBUyxHQUFHLGlCQUFpQixPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQztJQUNyRSxDQUFDO0lBRUQsT0FBTyxDQUNMO0VBQ0YsV0FBVyxDQUFDLEtBQUssSUFBSSxXQUFXLENBQUMsV0FBVztlQUMvQixPQUFPLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxLQUFLO2NBQ3JDLE9BQU8sQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUk7UUFDeEQsZ0JBQWdCO1FBQ2hCLFNBQVM7UUFDVCxTQUFTLENBQ1YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0V2VhdGhlciBmcm9tIFwiLi9nZXQtd2VhdGhlci5qc1wiO1xuaW1wb3J0IHdlYXRoZXJEZXNjcmlwdGlvbiBmcm9tIFwiLi9kZXNjcmlwdGlvbi5qc1wiO1xuXG5pbnRlcmZhY2UgV2VhdGhlclJlcG9ydCB7XG4gIHByb3BlcnRpZXM6IHtcbiAgICB0ZXh0RGVzY3JpcHRpb246IHN0cmluZztcbiAgICBpY29uOiBzdHJpbmc7XG4gICAgdGVtcGVyYXR1cmU6IHtcbiAgICAgIHZhbHVlOiBudW1iZXI7XG4gICAgfTtcbiAgICB2aXNpYmlsaXR5OiB7XG4gICAgICB2YWx1ZTogbnVtYmVyO1xuICAgIH07XG4gICAgcmVsYXRpdmVIdW1pZGl0eToge1xuICAgICAgdmFsdWU6IG51bWJlcjtcbiAgICB9O1xuICAgIHdpbmRDaGlsbDoge1xuICAgICAgdmFsdWU6IG51bWJlcjtcbiAgICB9O1xuICAgIGhlYXRJbmRleDoge1xuICAgICAgdmFsdWU6IG51bWJlcjtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiB0ZXh0UmVwb3J0KFxuICBzdGF0aW9uOiBzdHJpbmcgPSBcIktOWUNcIixcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IHdlYXRoZXIgPSAoYXdhaXQgZ2V0V2VhdGhlcihzdGF0aW9uKSkgYXMgV2VhdGhlclJlcG9ydDtcbiAgaWYgKCF3ZWF0aGVyKSB7XG4gICAgcmV0dXJuIFwiTm8gd2VhdGhlciBkYXRhIGF2YWlsYWJsZS5cIjtcbiAgfVxuXG4gIGNvbnN0IHdlYXRoZXJDb2RlQXJyYXkgPSB3ZWF0aGVyLnByb3BlcnRpZXMuaWNvbi5zcGxpdChcIi9cIik7XG4gIGNvbnN0IHdlYXRoZXJDb2RlID1cbiAgICB3ZWF0aGVyQ29kZUFycmF5W3dlYXRoZXJDb2RlQXJyYXkubGVuZ3RoIC0gMV0uc3BsaXQoXCI/XCIpWzBdO1xuXG4gIGNvbnN0IGRlc2NyaXB0aW9uID0gd2VhdGhlckRlc2NyaXB0aW9uKHdlYXRoZXJDb2RlKTtcblxuICBpZiAoL25pZ2h0Ly50ZXN0KHdlYXRoZXIucHJvcGVydGllcy5pY29uKSkge1xuICAgIGRlc2NyaXB0aW9uLmVtb2ppID0gXCLwn4yDXCI7XG4gIH1cblxuICBsZXQgcmVsYXRpdmVIdW1pZGl0eSA9IFwiXCI7XG4gIGlmICh3ZWF0aGVyLnByb3BlcnRpZXMucmVsYXRpdmVIdW1pZGl0eS52YWx1ZSkge1xuICAgIHJlbGF0aXZlSHVtaWRpdHkgPSBgXFxuUmVsYXRpdmUgSHVtaWRpdHk6ICR7d2VhdGhlci5wcm9wZXJ0aWVzLnJlbGF0aXZlSHVtaWRpdHkudmFsdWV9JWA7XG4gIH1cblxuICBsZXQgd2luZENoaWxsID0gXCJcIjtcbiAgaWYgKHdlYXRoZXIucHJvcGVydGllcy53aW5kQ2hpbGwudmFsdWUpIHtcbiAgICB3aW5kQ2hpbGwgPSBgXFxuV2luZCBDaGlsbDogJHt3ZWF0aGVyLnByb3BlcnRpZXMud2luZENoaWxsLnZhbHVlfcKwYDtcbiAgfVxuICBsZXQgaGVhdEluZGV4ID0gXCJcIjtcbiAgaWYgKHdlYXRoZXIucHJvcGVydGllcy5oZWF0SW5kZXgudmFsdWUpIHtcbiAgICBoZWF0SW5kZXggPSBgXFxuSGVhdCBJbmRleDogJHt3ZWF0aGVyLnByb3BlcnRpZXMuaGVhdEluZGV4LnZhbHVlfcKwYDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgYEN1cnJlbnQgY29uZGl0aW9ucyAodmlhIE5PQUEpOlxuJHtkZXNjcmlwdGlvbi5lbW9qaX0gJHtkZXNjcmlwdGlvbi5kZXNjcmlwdGlvbn1cblRlbXBlcmF0dXJlOiAke3dlYXRoZXIucHJvcGVydGllcy50ZW1wZXJhdHVyZS52YWx1ZX3CsFxuVmlzaWJpbGl0eTogJHt3ZWF0aGVyLnByb3BlcnRpZXMudmlzaWJpbGl0eS52YWx1ZSAvIDEwMDB9a21gICtcbiAgICByZWxhdGl2ZUh1bWlkaXR5ICtcbiAgICB3aW5kQ2hpbGwgK1xuICAgIGhlYXRJbmRleFxuICApO1xufVxuIl19
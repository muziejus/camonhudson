import getWeather from "./get-weather.js";
import weatherDescription from "./description.js";
function rounder(num) {
    return Math.round(num * 100) / 100;
}
export default async function textReport(station = "KNYC") {
    const weather = (await getWeather(station));
    if (!weather) {
        return "No weather data available.";
    }
    const weatherCodeArray = weather.properties.icon.split("/");
    const weatherCode = weatherCodeArray[weatherCodeArray.length - 1].split("?")[0];
    const description = weatherDescription(weatherCode);
    if (/Fair/.test(description.description) &&
        /night/.test(weather.properties.icon)) {
        description.emoji = "ðŸŒƒ";
    }
    let visibility = "";
    if (weather.properties.visibility.value &&
        weather.properties.visibility.value < 1600) {
        visibility = `\nVisibility: ${weather.properties.visibility.value / 1000}km`;
    }
    let relativeHumidity = "";
    if (weather.properties.relativeHumidity.value) {
        relativeHumidity = `\nRelative Humidity: ${rounder(weather.properties.relativeHumidity.value)}%`;
    }
    let windChill = "";
    if (weather.properties.windChill.value) {
        windChill = `\nWind Chill: ${rounder(weather.properties.windChill.value)}Â°`;
    }
    let heatIndex = "";
    if (weather.properties.heatIndex.value) {
        heatIndex = `\nHeat Index: ${rounder(weather.properties.heatIndex.value)}Â°`;
    }
    return (`Current conditions (via NOAA):
${description.emoji} ${description.description}
Temperature: ${rounder(weather.properties.temperature.value)}Â°` +
        visibility +
        relativeHumidity +
        windChill +
        heatIndex);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC1yZXBvcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvd2VhdGhlci90ZXh0LXJlcG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFVBQVUsTUFBTSxrQkFBa0IsQ0FBQztBQUMxQyxPQUFPLGtCQUFrQixNQUFNLGtCQUFrQixDQUFDO0FBd0JsRCxTQUFTLE9BQU8sQ0FBQyxHQUFXO0lBQzFCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ3JDLENBQUM7QUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssVUFBVSxVQUFVLENBQ3RDLFVBQWtCLE1BQU07SUFFeEIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxNQUFNLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBa0IsQ0FBQztJQUM3RCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDYixPQUFPLDRCQUE0QixDQUFDO0lBQ3RDLENBQUM7SUFFRCxNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1RCxNQUFNLFdBQVcsR0FDZixnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTlELE1BQU0sV0FBVyxHQUFHLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRXBELElBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDO1FBQ3BDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFDckMsQ0FBQztRQUNELFdBQVcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDcEIsSUFDRSxPQUFPLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxLQUFLO1FBQ25DLE9BQU8sQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxJQUFJLEVBQzFDLENBQUM7UUFDRCxVQUFVLEdBQUcsaUJBQ1gsT0FBTyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSyxHQUFHLElBQ3hDLElBQUksQ0FBQztJQUNQLENBQUM7SUFFRCxJQUFJLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztJQUMxQixJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDOUMsZ0JBQWdCLEdBQUcsd0JBQXdCLE9BQU8sQ0FDaEQsT0FBTyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQzFDLEdBQUcsQ0FBQztJQUNQLENBQUM7SUFFRCxJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDbkIsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN2QyxTQUFTLEdBQUcsaUJBQWlCLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQzlFLENBQUM7SUFDRCxJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDbkIsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN2QyxTQUFTLEdBQUcsaUJBQWlCLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQzlFLENBQUM7SUFFRCxPQUFPLENBQ0w7RUFDRixXQUFXLENBQUMsS0FBSyxJQUFJLFdBQVcsQ0FBQyxXQUFXO2VBQy9CLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRztRQUMzRCxVQUFVO1FBQ1YsZ0JBQWdCO1FBQ2hCLFNBQVM7UUFDVCxTQUFTLENBQ1YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0V2VhdGhlciBmcm9tIFwiLi9nZXQtd2VhdGhlci5qc1wiO1xuaW1wb3J0IHdlYXRoZXJEZXNjcmlwdGlvbiBmcm9tIFwiLi9kZXNjcmlwdGlvbi5qc1wiO1xuXG5pbnRlcmZhY2UgV2VhdGhlclJlcG9ydCB7XG4gIHByb3BlcnRpZXM6IHtcbiAgICB0ZXh0RGVzY3JpcHRpb246IHN0cmluZztcbiAgICBpY29uOiBzdHJpbmc7XG4gICAgdGVtcGVyYXR1cmU6IHtcbiAgICAgIHZhbHVlOiBudW1iZXI7XG4gICAgfTtcbiAgICB2aXNpYmlsaXR5OiB7XG4gICAgICB2YWx1ZTogbnVtYmVyO1xuICAgIH07XG4gICAgcmVsYXRpdmVIdW1pZGl0eToge1xuICAgICAgdmFsdWU6IG51bWJlcjtcbiAgICB9O1xuICAgIHdpbmRDaGlsbDoge1xuICAgICAgdmFsdWU6IG51bWJlcjtcbiAgICB9O1xuICAgIGhlYXRJbmRleDoge1xuICAgICAgdmFsdWU6IG51bWJlcjtcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiByb3VuZGVyKG51bTogbnVtYmVyKTogbnVtYmVyIHtcbiAgcmV0dXJuIE1hdGgucm91bmQobnVtICogMTAwKSAvIDEwMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gdGV4dFJlcG9ydChcbiAgc3RhdGlvbjogc3RyaW5nID0gXCJLTllDXCIsXG4pOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCB3ZWF0aGVyID0gKGF3YWl0IGdldFdlYXRoZXIoc3RhdGlvbikpIGFzIFdlYXRoZXJSZXBvcnQ7XG4gIGlmICghd2VhdGhlcikge1xuICAgIHJldHVybiBcIk5vIHdlYXRoZXIgZGF0YSBhdmFpbGFibGUuXCI7XG4gIH1cblxuICBjb25zdCB3ZWF0aGVyQ29kZUFycmF5ID0gd2VhdGhlci5wcm9wZXJ0aWVzLmljb24uc3BsaXQoXCIvXCIpO1xuICBjb25zdCB3ZWF0aGVyQ29kZSA9XG4gICAgd2VhdGhlckNvZGVBcnJheVt3ZWF0aGVyQ29kZUFycmF5Lmxlbmd0aCAtIDFdLnNwbGl0KFwiP1wiKVswXTtcblxuICBjb25zdCBkZXNjcmlwdGlvbiA9IHdlYXRoZXJEZXNjcmlwdGlvbih3ZWF0aGVyQ29kZSk7XG5cbiAgaWYgKFxuICAgIC9GYWlyLy50ZXN0KGRlc2NyaXB0aW9uLmRlc2NyaXB0aW9uKSAmJlxuICAgIC9uaWdodC8udGVzdCh3ZWF0aGVyLnByb3BlcnRpZXMuaWNvbilcbiAgKSB7XG4gICAgZGVzY3JpcHRpb24uZW1vamkgPSBcIvCfjINcIjtcbiAgfVxuXG4gIGxldCB2aXNpYmlsaXR5ID0gXCJcIjtcbiAgaWYgKFxuICAgIHdlYXRoZXIucHJvcGVydGllcy52aXNpYmlsaXR5LnZhbHVlICYmXG4gICAgd2VhdGhlci5wcm9wZXJ0aWVzLnZpc2liaWxpdHkudmFsdWUgPCAxNjAwXG4gICkge1xuICAgIHZpc2liaWxpdHkgPSBgXFxuVmlzaWJpbGl0eTogJHtcbiAgICAgIHdlYXRoZXIucHJvcGVydGllcy52aXNpYmlsaXR5LnZhbHVlIC8gMTAwMFxuICAgIH1rbWA7XG4gIH1cblxuICBsZXQgcmVsYXRpdmVIdW1pZGl0eSA9IFwiXCI7XG4gIGlmICh3ZWF0aGVyLnByb3BlcnRpZXMucmVsYXRpdmVIdW1pZGl0eS52YWx1ZSkge1xuICAgIHJlbGF0aXZlSHVtaWRpdHkgPSBgXFxuUmVsYXRpdmUgSHVtaWRpdHk6ICR7cm91bmRlcihcbiAgICAgIHdlYXRoZXIucHJvcGVydGllcy5yZWxhdGl2ZUh1bWlkaXR5LnZhbHVlLFxuICAgICl9JWA7XG4gIH1cblxuICBsZXQgd2luZENoaWxsID0gXCJcIjtcbiAgaWYgKHdlYXRoZXIucHJvcGVydGllcy53aW5kQ2hpbGwudmFsdWUpIHtcbiAgICB3aW5kQ2hpbGwgPSBgXFxuV2luZCBDaGlsbDogJHtyb3VuZGVyKHdlYXRoZXIucHJvcGVydGllcy53aW5kQ2hpbGwudmFsdWUpfcKwYDtcbiAgfVxuICBsZXQgaGVhdEluZGV4ID0gXCJcIjtcbiAgaWYgKHdlYXRoZXIucHJvcGVydGllcy5oZWF0SW5kZXgudmFsdWUpIHtcbiAgICBoZWF0SW5kZXggPSBgXFxuSGVhdCBJbmRleDogJHtyb3VuZGVyKHdlYXRoZXIucHJvcGVydGllcy5oZWF0SW5kZXgudmFsdWUpfcKwYDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgYEN1cnJlbnQgY29uZGl0aW9ucyAodmlhIE5PQUEpOlxuJHtkZXNjcmlwdGlvbi5lbW9qaX0gJHtkZXNjcmlwdGlvbi5kZXNjcmlwdGlvbn1cblRlbXBlcmF0dXJlOiAke3JvdW5kZXIod2VhdGhlci5wcm9wZXJ0aWVzLnRlbXBlcmF0dXJlLnZhbHVlKX3CsGAgK1xuICAgIHZpc2liaWxpdHkgK1xuICAgIHJlbGF0aXZlSHVtaWRpdHkgK1xuICAgIHdpbmRDaGlsbCArXG4gICAgaGVhdEluZGV4XG4gICk7XG59XG4iXX0=
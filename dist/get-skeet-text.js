import sunCalc from "suncalc";
import weatherText from "./weather/text-report.js";
export default async function (time) {
    const now = new Date().toLocaleString("en-US", {
        timeZone: "America/New_York",
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "numeric",
        hour12: false,
        minute: "numeric",
    });
    let text = `Greetings from ðŸ—½ on ${now}.`;
    if (time == "sunrise") {
        text = `ðŸŒ… on ${now} in New York City.`;
    }
    else if (time == "sunset") {
        text = `ðŸŒ‡ on ${now} in New York City.`;
    }
    else if (time == "night") {
        const moonPhase = sunCalc.getMoonIllumination(new Date()).phase;
        const moonPhases = ["ðŸŒ‘", "ðŸŒ’", "ðŸŒ“", "ðŸŒ”", "ðŸŒ•", "ðŸŒ–", "ðŸŒ—", "ðŸŒ˜"];
        let moon = moonPhases[0];
        if (moonPhase > 0 && moonPhase < 0.25) {
            moon = moonPhases[1];
        }
        else if (moonPhase == 0.25) {
            moon = moonPhases[2];
        }
        else if (moonPhase < 0.5) {
            moon = moonPhases[3];
        }
        else if (moonPhase == 0.5) {
            moon = moonPhases[4];
        }
        else if (moonPhase > 0.5 && moonPhase < 0.75) {
            moon = moonPhases[5];
        }
        else if (moonPhase == 0.75) {
            moon = moonPhases[6];
        }
        else if (moonPhase < 1) {
            moon = moonPhases[7];
        }
        text = `${moon} on ${now} in New York City.`;
    }
    const weatherReport = await weatherText("KNYC");
    return `${text}\n\n${weatherReport}`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXNrZWV0LXRleHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ2V0LXNrZWV0LXRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBQzlCLE9BQU8sV0FBVyxNQUFNLDBCQUEwQixDQUFDO0FBRW5ELE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxXQUNsQixJQUE0QztJQUU1QyxNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUU7UUFDN0MsUUFBUSxFQUFFLGtCQUFrQjtRQUM1QixPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxTQUFTO1FBQ2YsS0FBSyxFQUFFLE1BQU07UUFDYixHQUFHLEVBQUUsU0FBUztRQUNkLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLEtBQUs7UUFDYixNQUFNLEVBQUUsU0FBUztLQUNsQixDQUFDLENBQUM7SUFFSCxJQUFJLElBQUksR0FBRyx3QkFBd0IsR0FBRyxHQUFHLENBQUM7SUFFMUMsSUFBSSxJQUFJLElBQUksU0FBUyxFQUFFLENBQUM7UUFDdEIsSUFBSSxHQUFHLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQztJQUMxQyxDQUFDO1NBQU0sSUFBSSxJQUFJLElBQUksUUFBUSxFQUFFLENBQUM7UUFDNUIsSUFBSSxHQUFHLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQztJQUMxQyxDQUFDO1NBQU0sSUFBSSxJQUFJLElBQUksT0FBTyxFQUFFLENBQUM7UUFDM0IsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDaEUsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEUsSUFBSSxJQUFJLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLElBQUksU0FBUyxHQUFHLENBQUMsSUFBSSxTQUFTLEdBQUcsSUFBSSxFQUFFLENBQUM7WUFDdEMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixDQUFDO2FBQU0sSUFBSSxTQUFTLElBQUksSUFBSSxFQUFFLENBQUM7WUFDN0IsSUFBSSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixDQUFDO2FBQU0sSUFBSSxTQUFTLEdBQUcsR0FBRyxFQUFFLENBQUM7WUFDM0IsSUFBSSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixDQUFDO2FBQU0sSUFBSSxTQUFTLElBQUksR0FBRyxFQUFFLENBQUM7WUFDNUIsSUFBSSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixDQUFDO2FBQU0sSUFBSSxTQUFTLEdBQUcsR0FBRyxJQUFJLFNBQVMsR0FBRyxJQUFJLEVBQUUsQ0FBQztZQUMvQyxJQUFJLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLENBQUM7YUFBTSxJQUFJLFNBQVMsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUM3QixJQUFJLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLENBQUM7YUFBTSxJQUFJLFNBQVMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUN6QixJQUFJLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLENBQUM7UUFFRCxJQUFJLEdBQUcsR0FBRyxJQUFJLE9BQU8sR0FBRyxvQkFBb0IsQ0FBQztJQUMvQyxDQUFDO0lBRUQsTUFBTSxhQUFhLEdBQUcsTUFBTSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFaEQsT0FBTyxHQUFHLElBQUksT0FBTyxhQUFhLEVBQUUsQ0FBQztBQUN2QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN1bkNhbGMgZnJvbSBcInN1bmNhbGNcIjtcbmltcG9ydCB3ZWF0aGVyVGV4dCBmcm9tIFwiLi93ZWF0aGVyL3RleHQtcmVwb3J0LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIChcbiAgdGltZTogXCJzdW5yaXNlXCIgfCBcInN1bnNldFwiIHwgXCJuaWdodFwiIHwgXCJkYXlcIixcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkudG9Mb2NhbGVTdHJpbmcoXCJlbi1VU1wiLCB7XG4gICAgdGltZVpvbmU6IFwiQW1lcmljYS9OZXdfWW9ya1wiLFxuICAgIHdlZWtkYXk6IFwibG9uZ1wiLFxuICAgIHllYXI6IFwibnVtZXJpY1wiLFxuICAgIG1vbnRoOiBcImxvbmdcIixcbiAgICBkYXk6IFwibnVtZXJpY1wiLFxuICAgIGhvdXI6IFwibnVtZXJpY1wiLFxuICAgIGhvdXIxMjogZmFsc2UsXG4gICAgbWludXRlOiBcIm51bWVyaWNcIixcbiAgfSk7XG5cbiAgbGV0IHRleHQgPSBgR3JlZXRpbmdzIGZyb20g8J+XvSBvbiAke25vd30uYDtcblxuICBpZiAodGltZSA9PSBcInN1bnJpc2VcIikge1xuICAgIHRleHQgPSBg8J+MhSBvbiAke25vd30gaW4gTmV3IFlvcmsgQ2l0eS5gO1xuICB9IGVsc2UgaWYgKHRpbWUgPT0gXCJzdW5zZXRcIikge1xuICAgIHRleHQgPSBg8J+MhyBvbiAke25vd30gaW4gTmV3IFlvcmsgQ2l0eS5gO1xuICB9IGVsc2UgaWYgKHRpbWUgPT0gXCJuaWdodFwiKSB7XG4gICAgY29uc3QgbW9vblBoYXNlID0gc3VuQ2FsYy5nZXRNb29uSWxsdW1pbmF0aW9uKG5ldyBEYXRlKCkpLnBoYXNlO1xuICAgIGNvbnN0IG1vb25QaGFzZXMgPSBbXCLwn4yRXCIsIFwi8J+MklwiLCBcIvCfjJNcIiwgXCLwn4yUXCIsIFwi8J+MlVwiLCBcIvCfjJZcIiwgXCLwn4yXXCIsIFwi8J+MmFwiXTtcbiAgICBsZXQgbW9vbiA9IG1vb25QaGFzZXNbMF07XG4gICAgaWYgKG1vb25QaGFzZSA+IDAgJiYgbW9vblBoYXNlIDwgMC4yNSkge1xuICAgICAgbW9vbiA9IG1vb25QaGFzZXNbMV07XG4gICAgfSBlbHNlIGlmIChtb29uUGhhc2UgPT0gMC4yNSkge1xuICAgICAgbW9vbiA9IG1vb25QaGFzZXNbMl07XG4gICAgfSBlbHNlIGlmIChtb29uUGhhc2UgPCAwLjUpIHtcbiAgICAgIG1vb24gPSBtb29uUGhhc2VzWzNdO1xuICAgIH0gZWxzZSBpZiAobW9vblBoYXNlID09IDAuNSkge1xuICAgICAgbW9vbiA9IG1vb25QaGFzZXNbNF07XG4gICAgfSBlbHNlIGlmIChtb29uUGhhc2UgPiAwLjUgJiYgbW9vblBoYXNlIDwgMC43NSkge1xuICAgICAgbW9vbiA9IG1vb25QaGFzZXNbNV07XG4gICAgfSBlbHNlIGlmIChtb29uUGhhc2UgPT0gMC43NSkge1xuICAgICAgbW9vbiA9IG1vb25QaGFzZXNbNl07XG4gICAgfSBlbHNlIGlmIChtb29uUGhhc2UgPCAxKSB7XG4gICAgICBtb29uID0gbW9vblBoYXNlc1s3XTtcbiAgICB9XG5cbiAgICB0ZXh0ID0gYCR7bW9vbn0gb24gJHtub3d9IGluIE5ldyBZb3JrIENpdHkuYDtcbiAgfVxuXG4gIGNvbnN0IHdlYXRoZXJSZXBvcnQgPSBhd2FpdCB3ZWF0aGVyVGV4dChcIktOWUNcIik7XG5cbiAgcmV0dXJuIGAke3RleHR9XFxuXFxuJHt3ZWF0aGVyUmVwb3J0fWA7XG59XG4iXX0=